for(i in 1:nrow(aves)) {
dat$aveSeqs[as.character(dat$Description) == as.character(aves$StudyName)[i]] <- aves$aveSeqLength[i]
}
dat$aveSeqs
nrow(aves)
as.character(dat$Description)
as.character(aves$StudyName)
all(aves$StudyName %in% dat$Description)
aves$aveSeqLength
aves
dat$aveSeqs <- NULL
all(aves$StudyName %in% dat$Description)
for(i in 1:nrow(aves)) {
dat$aveSeqs[which(dat$Description == aves$StudyName[i]] <- aves$avgSeqLength[i]
}
dat$aveSeqs
dat$aveSeqs <- NULL
all(aves$StudyName %in% dat$Description)
for(i in 1:nrow(aves)) {
dat$aveSeqs[which(dat$Description == aves$StudyName[i])] <- aves$avgSeqLength[i]
}
dat$aveSeqs
aves$avgSeqLength
which(dat$Description == aves$StudyName[i])
dat$aveSeqs <- 0
all(aves$StudyName %in% dat$Description)
for(i in 1:nrow(aves)) {
dat$aveSeqs[dat$Description == aves$StudyName[i]] <- aves$avgSeqLength[i]
}
dat$aveSeqs
aves <- read.delim('aveSeqs.txt', sep='\t', head=TRUE)
dat
aves
dat$aveSeqs <- 0
dat$percentAssigned <- 0
aves
for(i in 1:nrow(aves)) {
dat$aveSeqs[dat$Description == aves$StudyName[i]] <- aves$avgSeqLength[i]
dat$percentAssigned[dat$Description == aves$StudyName[i]] <- aves$percentAssigned[i]
}
dat$aveSeqs
dat$percentAssigned
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
dat$aveSeqLength <- 0
aves
for(i in 1:nrow(aves)) {
dat$aveSeqLength[dat$Description == aves$StudyName[i]] <- aves$avgSeqLength[i]
}
plot(dat$H1 ~ dat$aveSeqLength, pch=16, cex=.4, col=dat$col)
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
summary(lm(dat$H1 ~ dat$aveSeqLength))
summary(lm(dat$percentAssigned ~ dat$aveSeqLength))
plot(dat$percentAssigned ~ dat$aveSeqLength, pch=16, cex=.4, col=dat$col)
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
summary(lm(dat$H1 ~ dat$percentAssigned*dat$aveSeqLength))
plot(dat$percentAssigned ~ dat$aveSeqLength, pch=16, cex=.4, col=dat$col)
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
summary(lm(dat$H1 ~ dat$percentAssigned))
plot(dat$H1 ~ dat$percentAssigned, pch=16, cex=.4, col=dat$col)
plot(dat$H1 ~ sqrt(dat$percentAssigned), pch=16, cex=.4, col=dat$col)
plot(dat$H1 ~ log(dat$percentAssigned), pch=16, cex=.4, col=dat$col)
plot(dat$H1 ~ dat$percentAssigned^2, pch=16, cex=.4, col=dat$col)
plot(dat$H1 ~ dat$percentAssigned^5, pch=16, cex=.4, col=dat$col)
plot(dat$H1 ~ I(dat$percentAssigned^5), pch=16, cex=.4, col=dat$col)
plot(dat$H1 ~ I(dat$percentAssigned^4), pch=16, cex=.4, col=dat$col)
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
which(dat$Description == 'Bowers_storm_peak')
plot(dat$percentAssigned ~ dat$aveSeqLength, pch=16, cex=.4, col=dat$col)
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
which(dat$Description == 'Flores_Residential_Kitchen_Microbiology')
kit <- which(dat$Description == 'Flores_Residential_Kitchen_Microbiology')
plot(dat$H1[kit] ~ I(dat$percentAssigned[kit]^4), pch=16, cex=.4, col=dat$col[kit])
plot(dat$H1[kit] ~ dat$percentAssigned[kit], pch=16, cex=.4, col=dat$col[kit])
summary(lm(dat$H1[kit] ~ dat$percentAssigned[kit]))
kit <- which(dat$Description == 'Leff_forty_homes_HiSeq')
leff <- which(dat$Description == 'Leff_forty_homes_HiSeq')
kit <- which(dat$Description == 'Flores_Residential_Kitchen_Microbiology')
summary(lm(dat$H1[kit] ~ dat$percentAssigned[kit]))
summary(lm(dat$H1[leff] ~ dat$percentAssigned[leff]))
plot(dat$H1[leff] ~ dat$percentAssigned[leff], pch=16, cex=.4, col=dat$col[leff])
plot(dat$H1[leff] ~ I(dat$percentAssigned[leff]^2), pch=16, cex=.4, col=dat$col[leff])
plot(dat$H1[leff] ~ I(dat$percentAssigned[leff]^4), pch=16, cex=.4, col=dat$col[leff])
summary(lm(dat$H1[leff] ~ I(dat$percentAssigned[leff]^4)))
summary(lm(dat$H1[leff] ~ dat$percentAssigned[leff]))
plot(dat$H1[leff] ~ dat$percentAssigned[leff], pch=16, cex=.4, col=dat$col[leff])
head(dat)
dat[, c('Room_Function', 'Specific_Matrix')]
dat[c(1:500), c('Room_Function', 'Specific_Matrix')]
boxplot(dat$H1 ~ dat$SequencingTechnology)
head(dat)
boxplot(dat$H1 ~ dat$Sequencing_Technology)
dat$SeqTech2[grep('454', dat$Sequencing_Technology)] <- '454'
dat$SeqTech2 <- 'Illumina'
dat$SeqTech2[grep('454', dat$Sequencing_Technology)] <- '454'
boxplot(dat$H1 ~ dat$SeqTech2)
t.test(dat$H1 ~ dat$SeqTech2)
boxplot(dat$percentAssigned ~ dat$SeqTech2)
t.test(dat$percentAssigned ~ dat$SeqTech2)
boxplot(dat$aveSeqLength ~ dat$SeqTech2)
aves <- read.delim('aveSeqs.txt', sep='\t', head=TRUE)
boxplot(aves$aveSeqLength ~ aves$platform)
aves
boxplot(aves$avgSeqLength ~ aves$platform)
t.test(aves$avgSeqLength ~ dat$platform)
t.test(aves$avgSeqLength ~ aves$platform)
table(dat$SeqTech2)
table(aves$platform)
summary(lm(dat$H1 ~ dat$aveSeqLength))
plot(dat$H1 ~ dat$aveSeqLength, pch=16, cex=.4, col=dat$col)
plot(dat$percentAssigned ~ dat$aveSeqLength, pch=16, cex=.4, col=dat$col)
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
plot(dat$percentAssigned ~ dat$aveSeqLength, pch=16, cex=.4, col=dat$col,
xlim=c(0, 330))
summary(lm(dat$percentAssigned ~ dat$aveSeqLength))
summary(lm(dat$H1 ~ dat$aveSeqLength))
summary(lm(dat$H1 ~ dat$percentAssigned))
plot(dat$H1 ~ I(dat$percentAssigned^4), pch=16, cex=.4, col=dat$col)
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
summary(lm(dat$H1 ~ I(dat$percentAssigned^4)))
plot(dat$H1 ~ dat$percentAssigned, pch=16, cex=.4, col=dat$col)
nlevels(dat$Description)
nstudies <- nlevels(dat$Description)
divBars <- data.frame(matrix(0, nrow=nstudies, ncol=6),
names=c('meanX', 'meanY', 'seXplus', 'seXminus', 'seYplus', 'seYminus'))
divBars <- data.frame(matrix(0, nrow=nstudies, ncol=6),
colnames=c('meanX', 'meanY', 'seXplus', 'seXminus', 'seYplus', 'seYminus'))
divBars <- data.frame(matrix(0, nrow=nstudies, ncol=6))
divBars
aggregate(dat$percentAssigned, by=list(dat$Description))
aggregate(dat$percentAssigned, by=list(dat$Description), FUN='mean')
aggregate(dat$H1, by=list(dat$Description), FUN='mean')$x
se <- function(x) {sd(x)/sqrt(length(x))}
aggregate(dat$percentAssigned, by=list(dat$Description), FUN='se')$x
divBars <- data.frame(#matrix(0, nrow=nstudies, ncol=8),
meanX=aggregate(dat$percentAssigned, by=list(dat$Description), FUN='mean')$x,
meanY=aggregate(dat$H1, by=list(dat$Description), FUN='mean')$x,
seX=aggregate(dat$percentAssigned, by=list(dat$Description), FUN='se')$x,
seY=aggregate(dat$H1, by=list(dat$Description), FUN='se')$x)
divBars
dat$percentAssigned4 <- dat$percentAssigned^4
divBars$seXplus <- divBars$meanX + divBars$seX
divBars$seXplus <- divBars$meanX + divBars$seX
divBars$seXminus <- divBars$meanX - divBars$seX
divBars$seYplus <- divBars$meanY + divBars$seY
divBars$seYminus <- divBars$meanY - divBars$seY
row.names(divBars) <- levels(dat$Description)
divBars
plot(dat$H1 ~ dat$percentAssigned4, pch=16, cex=.4, col=dat$col)
sqrt(.2)
sqrt(sqrt(.2))
points(divBars$meanX, divBars$meanY)
plot(dat$H1 ~ dat$percentAssigned4, type='n')
points(divBars$meanX, divBars$meanY)
se <- function(x) {sd(x)/sqrt(length(x))}
nstudies <- nlevels(dat$Description)
dat$percentAssigned4 <- dat$percentAssigned^4
divBars <- data.frame(#matrix(0, nrow=nstudies, ncol=8),
meanX=aggregate(dat$percentAssigned4, by=list(dat$Description), FUN='mean')$x,
meanY=aggregate(dat$H1, by=list(dat$Description), FUN='mean')$x,
seX=aggregate(dat$percentAssigned4, by=list(dat$Description), FUN='se')$x,
seY=aggregate(dat$H1, by=list(dat$Description), FUN='se')$x)
row.names(divBars) <- levels(dat$Description)
divBars$seXplus <- divBars$meanX + divBars$seX
divBars$seXminus <- divBars$meanX - divBars$seX
divBars$seYplus <- divBars$meanY + divBars$seY
divBars$seYminus <- divBars$meanY - divBars$seY
plot(dat$H1 ~ dat$percentAssigned4, type='n')
points(divBars$meanX, divBars$meanY)
names(dat)
unique(dat$col)
divBars$col <- unique(dat$col)
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col)
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2)
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
arrows(divBars$seXplus, divBars$seYplus, divBars$seXminus, divBars$seYminus,
code=3, col='gray')
arrows(divBars$meanX, divBars$seYplus, divBars$meanX, divBars$seYminus,
code=3, angle=90, length=.1, col='gray')
plot(dat$H1 ~ dat$percentAssigned4, type='n')
arrows(divBars$meanX, divBars$seYplus, divBars$meanX, divBars$seYminus,
code=3, angle=90, length=.1, col='gray50')
arrows(divBars$seXplus, divBars$meanY, divBars$seXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
se <- function(x) {sd(x)/sqrt(length(x))}
nstudies <- nlevels(dat$Description)
dat$percentAssigned4 <- dat$percentAssigned^4
divBars <- data.frame(#matrix(0, nrow=nstudies, ncol=8),
meanX=aggregate(dat$percentAssigned4, by=list(dat$Description), FUN='mean')$x,
meanY=aggregate(dat$H1, by=list(dat$Description), FUN='mean')$x,
seX=aggregate(dat$percentAssigned4, by=list(dat$Description), FUN='se')$x,
seY=aggregate(dat$H1, by=list(dat$Description), FUN='se')$x,
sdX=aggregate(dat$percentAssigned4, by=list(dat$Description), FUN='sd')$x,
sdY=aggregate(dat$H1, by=list(dat$Description), FUN='sd')$x)
row.names(divBars) <- levels(dat$Description)
divBars$seXplus <- divBars$meanX + divBars$sdX
divBars$seXminus <- divBars$meanX - divBars$sdX
divBars$seYplus <- divBars$meanY + divBars$sdY
divBars$seYminus <- divBars$meanY - divBars$sdY
divBars$sdXplus <- divBars$meanX + divBars$sdX
divBars$sdXminus <- divBars$meanX - divBars$sdX
divBars$sdYplus <- divBars$meanY + divBars$sdY
divBars$sdYminus <- divBars$meanY - divBars$sdY
divBars$col <- unique(dat$col)
plot(dat$H1 ~ dat$percentAssigned4, type='n', las=1,
ylab='Taxonomic Diversity', )
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray50')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(dat$H1 ~ dat$percentAssigned4, type='n', las=1,
ylab='Taxonomic Diversity',
xlim=c(1, 4.5))
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray50')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(dat$H1 ~ dat$percentAssigned4, type='n', las=1,
ylab='Taxonomic Diversity', ylim=c(1, 4.5))
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray50')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(dat$H1 ~ dat$percentAssigned4, type='n', las=1,
ylab='Taxonomic Diversity')#, ylim=c(1, 4.5))
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray50')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.4),
ylab='Taxonomic Diversity')#, ylim=c(1, 4.5))
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray50')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Taxonomic Diversity')#, ylim=c(1, 4.5))
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray50')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Taxonomic Diversity')#, ylim=c(1, 4.5))
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
divCoef <- summary(lm(dat$H1 ~ I(dat$percentAssigned^4)))$coeficients
divCoef
divCoef <- summary(lm(dat$H1 ~ I(dat$percentAssigned^4)))$coefficients
divCoef
divCoef <- summary(lm(dat$H1 ~ dat$percentAssigned4))$coefficients
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='red', lwd=3)
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Taxonomic Diversity')#, ylim=c(1, 4.5))
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='red', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
diversity
?diversity
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab='Percent of sequences assigned to GreenGenes')
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='red', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab='Percent of sequences assigned to GreenGenes (4th root)')
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='red', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression(paste('(Percent of sequences assigned to GreenGenes)^{4}')))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression(paste('(Percent of sequences assigned to GreenGenes)', ^{4})))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression(paste('(Percent of sequences assigned to GreenGenes)', ^4)))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression(paste('(Percent of sequences assigned to GreenGenes)', (^4))))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression((Percent^{4})))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression(((Percent~of~sequences~assigned~to~GreenGenes)^{4})))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression((Percent~of~sequences~assigned~to~GreenGenes)^{4}))
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='darkorange', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
layout(matrix(c(1, 2), 1, 2), widths=3, 1)
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression((Percent~of~sequences~assigned~to~GreenGenes)^{4}))
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='darkorange', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
plot(1,1, ann=FALSE, axes=FALSE, bty='n')
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
layout(matrix(c(1, 2), 1, 2), widths=3, 1)
par(mar=c(4, 4, 1, 0))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression((Percent~of~sequences~assigned~to~GreenGenes)^{4}))
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='darkorange', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
par(mar=c(4, 0, 1, 0))
plot(1,1, ann=FALSE, axes=FALSE, bty='n', type='n')
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3)
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.3, y.intersp=1.1)
layout(matrix(c(1, 2), 1, 2), widths=3, 1)
par(mar=c(4, 4, 1, 0))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression((Percent~of~sequences~assigned~to~GreenGenes)^{4}))
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='darkorange', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
par(mar=c(4, 0, 1, 0))
plot(1,1, ann=FALSE, axes=FALSE, bty='n', type='n')
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.4, y.intersp=1.2)
pdf('~/Desktop/divPercent.pdf', width=9, height=7)
layout(matrix(c(1, 2), 1, 2), widths=3, 1)
par(mar=c(4, 4, 1, 0))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon–Wiener Taxonomic Diversity',
xlab=expression((Percent~of~sequences~assigned~to~GreenGenes)^{4}))
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='darkorange', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
par(mar=c(4, 0, 1, 0))
plot(1,1, ann=FALSE, axes=FALSE, bty='n', type='n')
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.4, y.intersp=1.2)
dev.off()
pdf('~/Desktop/divPercent.pdf', width=9, height=7)
layout(matrix(c(1, 2), 1, 2), widths=3, 1)
par(mar=c(4, 4, 1, 0))
plot(dat$H1 ~ dat$percentAssigned4, las=1, pch=16, cex=.4, col=rgb(0,0,0,.2),
ylab='Shannon-Wiener Taxonomic Diversity',
xlab=expression((Percent~of~sequences~assigned~to~GreenGenes)^{4}))
curve(divCoef[1] + x*divCoef[2], add=TRUE, col='darkorange', lwd=2)
arrows(divBars$meanX, divBars$sdYplus, divBars$meanX, divBars$sdYminus,
code=3, angle=90, length=.1, col='gray30')
arrows(divBars$sdXplus, divBars$meanY, divBars$sdXminus, divBars$meanY,
code=3, angle=90, length=.1, col='gray30')
points(divBars$meanX, divBars$meanY, pch=21, bg=divBars$col, cex=2, col='gray30')
par(mar=c(4, 0, 1, 0))
plot(1,1, ann=FALSE, axes=FALSE, bty='n', type='n')
legend('bottomleft', legend=unique(dat$Description), col=unique(dat$col),
pch=16, cex=.6, bty='n', pt.cex=1.4, y.intersp=1.2)
dev.off()
head(dat)
unique(dat$Room_Function)
dat$Room_Function[1:100]
dat$inOut[dat$Room_Function != 'balcony' && dat$Description == 'Adams_university_homes']
dat$inOut[dat$Room_Function != 'balcony' & dat$Description == 'Adams_university_homes']
dat$inOut
dat$inOut <- 'blank'
dat$inOut[dat$Room_Function == 'balcony'] <- 'out'
dat$inOut[dat$Room_Function != 'balcony' & dat$Description == 'Adams_university_homes']
dat$inOut[dat$Room_Function != 'balcony' & dat$Description == 'Adams_university_homes'] <- 'in'
write.table(dat, file='~/Desktop/checkDat.txt', sep='\t', quote=FALSE, row.names=TRUE)
jiveMeadowLillisAir <- read.delim('jiveLillisAir.txt', head=TRUE)
head(jiveMeadowLillisAir)
jiveAir <- read.delim('jiveLillisAir.txt', head=TRUE)
head(jiveAir)
rm(jiveMeadowLillisAir)
row.names(jiveAir) <- jiveAir$airID
all(row.names(jiveAir) %in% row.names(dat)
)
which(!row.names(jiveAir) %in% row.names(dat))
dat[dat$Description == 'Meadow_BELillis', ]
jiveAir <- read.delim('jiveLillisAir.txt', head=TRUE)
row.names(jiveAir) <- jiveAir$airID
which(!row.names(jiveAir) %in% row.names(dat))
jiveAir[which(!row.names(jiveAir) %in% row.names(dat)), ]
grep ('air097', row.names(dat))
jiveAir <- read.delim('jiveLillisAir.txt', head=TRUE)
row.names(jiveAir) <- jiveAir$airID
jiveAir[which(!row.names(jiveAir) %in% row.names(dat)), ]
which(!row.names(jiveAir) %in% row.names(dat))
head(dat)
meadowSub <- dat[dat$Description == 'Meadow_BELillis', ]
dim(meadowSub)
dim(jiveAir)
all(row.names(meadowSub) %in% row.names(jiveAir))
head(jiveAir)
meadowSub$room.out <- jiveAir$university_classroom.outside[row.names(meadowSub)]
meadowSub
row.names(meadowSub)
jiveAir$university_classroom.outside
jiveAir$university_classroom.outside[row.names(meadowSub)]
meadowSub$room.out <- as.character(jiveAir$university_classroom.outside[row.names(meadowSub)])
meadowSub$room.out
jiveAir.sort <- jiveAir[row.names(meadowSub), ]
jiveAir.sort
meadowSub$room.out <- jiveAir.sort$university_classroom.outside
head(meadowSub)
write.table(meadowSub, file='jiveMeadowLillisAirOut.txt', sep='\t', quote=FALSE, row.names=FALSE)
meadowSub[which(meadowSub$Specific_Matrix == 'outside'), ]
meadowSub[which(meadowSub$room.out == 'outside'), ]
meadowSub$Specific_Matrix[which(meadowSub$room.out == 'outside')]
meadowSub$Specific_Matrix[which(meadowSub$room.out == 'outside')] <- 'outdoor_air'
meadowSub$Specific_Matrix
save.image('~/Desktop/BEMAworking.RData')
rm(list=ls())
setwd('~/Dropbox/rwjf/Meadow_etal_Phones/')
set.seed(42)
options(scipen=7)  # curtail scientific notation
library(vegan)
library(labdsv)
library(miscTools)
library(xtable)
library(boot)
rw.list <- QiimeIn(file='phones_otu_table.txt')
source('functions.R')
rw.list <- QiimeIn(file='phones_otu_table.txt')
rw.map <- read.delim('phones_map.txt', head=TRUE, row.names=1)
rw.big <- rw.list$Table
rw.taxo <- rw.list$Taxa
rm(rw.list)
row.names(rw.big) <- gsub('X', '', row.names(rw.big))
rw.big <- rw.big[row.names(rw.map), ]
cont <- grep('cont', row.names(rw.map))
cont.table <- rw.big[cont, ]
dim(cont.table[, colSums(cont.table) > 0]
)
dim(cont.table)
cont.otus
cont.otus <- which(colSums(cont.table) >0)
cont.otus
plot(colSums(cont.table[, cont.otus] ~ colSums(rw.big[, cont.otus])))
plot(colSums(cont.table[, cont.otus]) ~ colSums(rw.big[, cont.otus]))
plot(colSums(cont.table[, cont.otus]) ~ colSums(rw.big[, cont.otus]))
plot(colSums(cont.table[, cont.otus])/sum(cont.table) ~ colSums(rw.big[, cont.otus])/sum(rw.big))
plot(colSums(cont.table[, cont.otus]/sum(cont.table)) ~ colSums(rw.big[, cont.otus]/sum(rw.big)))
cont3 <- which(colSums(cont.table)/sum(cont.table) > 0.05)
cont3
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
par(mfrow=c(1,3), bty='l', las=1)
plot(jac.NC ~ jac.N3)
plot(jac.NC ~ jac.ALL)
plot(jac.N3 ~ jac.ALL)
par(mfrow=c(1,1), bty='l', las=1)
pairs(cbind(jac.NC, jac.N3, jac.ALL))
pairs(cbind(jac.NC, jac.N3, jac.ALL), pch=16, col=rgb(0,0,0, .3))
cor(jac.NC, jac.N3)
cor(jac.NC, jac.ALL)
cor(jac.ALL, jac.N3)
length(cont.otus)
ncol(rw.big)
cont.otus.names <- col.names(cont.table)[which(colSums(cont.table) >0)]
col.names(rw.25)
colnames(rw.25)
1592/34000
rm(list=ls())
